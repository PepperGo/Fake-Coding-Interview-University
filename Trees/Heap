Heap (data structure) (https://en.wikipedia.org/wiki/Heap_(data_structure))

A heap is a specialized tree-based data structure that satisfies the heap property: 
If P is a parent node of C, then the key (the value) of node P is greater than the key of node C. 

A heap can be classified further as either a "max heap" or a "min heap".
In a max heap, the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node. 
In a min heap, the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node.

The heap is one maximally efficient implementation of an abstract data type called a priority queue, and in fact priority queues are often referred to as "heaps", regardless of how they may be implemented.
 


Implementation:
Heaps are usually implemented in an array (fixed size or dynamic array), and do not require pointers between elements. After an element is inserted into or deleted from a heap, the heap property may be violated and the heap must be balanced by internal operations.

Full and almost full binary heaps may be represented in a very space-efficient way (as an implicit data structure) using an array alone. 

The first (or last) element will contain the root. 
The next two elements of the array contain its children.
The next four contain the four children of the two child nodes, etc. 
...
Thus the children of the node at position n would be at positions 2n and 2n + 1 in a one-based array, or 2n + 1 and 2n + 2 in a zero-based array.

This allows moving up or down the tree by doing simple index computations. 

Balancing a heap is done by sift-up or sift-down operations (swapping elements which are out of order). As we can build a heap from an array without requiring extra memory (for the nodes, for example), heapsort can be used to sort an array in-place.


