//https://www.youtube.com/watch?v=4nKwesx_c8E&list=PLe-ggMe31CTeunC6GZHFBmQx7EKtjbGf9&index=1
Basic Idea:
1. Divide array into two halves
2. Recursively sort each half.
3. Merge two halves.



Goal： Given two sorted subarrays a[lo] to a[mid] and a[mid+1] to a[hi], replace with sorted subarray a [lo] to a[hi].

k, i , j(perimeter)

private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi){
	assert isSorted(a, lo, mid); //precondition: a[lo..mid] sorted
	assert isSorted(a, mid + 1, hi);//precondition: a[mid+1..hi] sorted
	
	for(int k = lo; k <= hi; k++)
		aux[k] = a[k];   //copy
	
	int i = lo, j = mid + 1;
	
	for(int k = lo; k <= hi; k++){  //merge
		if( i > mid)
			a[k] = aux[j++];
		else if(j > hi)
			a[k] = aux[j++];
		else if(less(aux[j], aux[i]))
			a[k] = aux[j++];
		else
			a[k] = aux[i++];
			
	}
	assert isSorted(a, lo, hi);
}

Assertions:
Assertion. Statement to test assumptions about your program.
1. help detect logic bugs.
2. documents code.

Java assert statement. Throws exception unless boolean condition is true.

Can enable or disable at runtime.(No cost in production code)

Best practices: Use assertions to check internal incariants; assume assertions will be disabled in production code.


public class Merge{
	private static void merge(...){
		//as before
	}
	
	private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi){
		if(hi <= lo) return;
		int mid = (lo + hi)/2;
		sort(a, aux, low, mid);
		sort(a, aux, mid + 1, hi);
		merge(a, aux, lo, mid, hi);
	}
	
	public static void sort(Comparable[] a){
		aux = new Comparable[a.length];
		sort(a, aux, 0, a.length - 1);
	}
}

Number of compares and array accesses:
       Mergesort uses at most NlogN compares and 6NlogN array accesses to sort any array of size N.
       
Proposition. If D(N) satisfies D(N) = 2D(N/2) + N for N > 1, with D(1) = 0, then D(N) = NlgN.

Memory: MergeSort uses extra space proportional to N.

Definition: A sorting algorithm is in-place if it uses <= clogN extra memory.
e.g Insertion sort, selection sort, shellsort


Improvement:
1. use insertion sort for small subarrays.(Cutoff to insertion sort for = 7 items)

	private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi){
		// if(hi <= lo + CUTOFF - 1) Insertion.sort(a, lo, hi).
		int mid = (lo + hi)/2;
		sort(a, aux, low, mid);
		sort(a, aux, mid + 1, hi);
		merge(a, aux, lo, mid, hi);
	}

2. Stop if already sorted.
  a. Is biggest item in first half <= smallest item in second half?
  b. Helps for partially-ordered arrays.
  
	private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi){
		// if(hi <= lo + CUTOFF - 1) Insertion.sort(a, lo, hi).
		int mid = (lo + hi)/2;
		sort(a, aux, low, mid);
		sort(a, aux, mid + 1, hi);
		//if(!less(a[mid+1], a[mid])) return;
		merge(a, aux, lo, mid, hi);
	}

3. Eliminate the copy to auxiliary array. Save time (but not space) by switching the role of the input and auxiliary array in each recursive call.

public class Merge{
	
	private static void merge(Comparable[] a, Comparable[] aux, int lo, int mid, int hi){
		int i = lo, j = mid + 1;
	
	    for(int k = lo; k <= hi; k++){  //merge from a[] to aux[]
		    if( i > mid)
			    aux[k] = a[j++];
		    else if(j > hi)
			    aux[k] = a[i++];
		    else if(less(a[j], a[i])) 
			    aux[k] = a[j++];
		    else
			    aux[k] = aux[i++];
		}
		
	}
	
	private static void sort(Comparable[] a, Comparable[] aux, int lo, int hi){
		if(hi <= lo) return;    //switch role of aux[] and a[]
		int mid = (lo + hi)/2;
		sort(aux, a, low, mid);
		sort(aux, a, mid + 1, hi);
		merge(aux, a, lo, mid, hi);  
	}
	
	public static void sort(Comparable[] a){
		aux = new Comparable[a.length];
		sort(a, aux, 0, a.length - 1);
	}
}




///////////////////////////////////////////////////////////////////////////////////////

Bottom-up mergesort:

Basic plan:
1. Pass through array, merging subarrays of size
2. Repeat for subarrays of size 2, 4, 8, 16, ...

Bottom line: No recusion.

public class MergeBU{
	private static Comparable[] aux;
	
	private static void merge(Comparable[] a, int lo, int mid, int hi){
		//as before
	}
	
	public static void sort(Comparable[] a){
		int N = a.length;
		aux = new Comparable[N];
		for(int sz = 1; sz < N; sz = sz+sz)
			for(int lo = 0; lo < N - sz; lo += sz+sz)
				merge(a, lo, lo+sz-1, Math.min(lo+sz+sz-1, N -1));
	}
}


///////////////////////////////////////////////////////////////////////////////////////
Sorting complexity:
Computational complexity： Framework to study efficiency of algorithms for solving a particular problem X.

Model of computation: Allow operations.
Cost model: Operation counts
Upper bound: Cost gurantee provided by some algorithm for X.
Lower bound: Proven limit on cost guarntee of all algorithms for X.
Optimal algorithm: Algorithm with best possible cost guarantee for X.


Compare-based lower bound for sorting(by Decision Tree):
Propsition: Any compare-based sorting algorithm must use at least lg(N!) ~ NlgN compares in th worst-case.
Proof:
     Binary tree of height h has at most 2^h leaves.
     N! different orderings -> at least N! leaves
     2^h >= #leaves >= N!
     --> h >= lg(N!) ~ NlgN

Example:
Model of computation: decision tree
Cost model: #compares
Upper bound: ~NlgN from mergesort
Lower bound: ~NlgN
Optimal algorithm: = mergesort(lower bound == upper bound)

Compares: Mergesort is optimal with respect to # compares
Space: Mergesort is not optimal with respect to space usage

Lower bound may not hold if the algorithm has information about:
1. The initial order of the input
2. The distribution of key values
3. The representation of keys

Partially-ordered arrays: Depending on the initial order of the input, we may not need NlgN compares

Duplicate keys: Depending on the input distribution of duplicates, we may not need NlgN compares

Digital properties of keys: We can use digit/character compares instead of key compares for numbers and strings.


///////////////////////////////////////////////////////////////////////////////////////
Comparators

Comparator interface: sort using an alternate order.
               public interface Comparator<Key>{
	          int compare(Key v, Key w)
	       }

Required property: Must be a total order.

To use with Java system sort:
    Create Cmparator object.
    Pass as second argument to Ararys.sort()
    
To support comparators in our sort implementations:
1. Use Object instead of Comparable.
2. Pass Comparator to sort() and less() and use it in less()

public static void sort(Object[] a, Comparator comparator){
	int N = a.length;
	for(int i = 0; i < N; i++)
		for(int j = i; j > 0 && less(comparator, a[j], a[j-1]); j--)
			exch(a, j, j - 1);
}

private static boolean less(Comparator c, Object v, Object w){
	return c.compare(v, w) < 0;
}

private static void exch(Object[] a, int i, int j){
	Object swap = a[i];
	a[i] = a[j];
	a[j] = swap;
}

To implement a comparator:
1. Define a (nested class) that implements the Comparator interface.
2. Implement the compare() method.


public class Student{
	public static final Comparator<Student> BY_NAME = new ByName();
	public static final Comparator<Student> BY_SECTION = new BySection();
	
	private final String name;
	private final int section;
	
	private static class ByName implements Comparator<Student>{
		public int compare(Student v, Student w){
			return v.name.compareTo(w.name);
		}
	}
	
	private static class BySection implements Comparetor<Student>{
		public int compare(Student v, Student w){
			return v.section - w.section;
		}
			
	}
}

Arrays.sort(a, Student.BY_Name);
Arrays.sort(a, Student.BY_SECTION);

/////////////////////////////////////////////////
Stability:
A stable sort preserves  the relative order of teh items with equal keys.

Which sorts are stable?
1. Insertion sort and mergesort. (But not selection sort or shellsort)

Mergesort: merge operation is stable.(takes from the left subarray of equal keys)
Insertion sort: Equal items never move past each other.
Selction sort & Shellsort: Long-distance exchange might move an item past some equal item.




	
-----------------------------------------------------------------------------------------------
MergeSort for linked list. (http://www.geeksforgeeks.org/merge-sort-for-linked-list/)

MergeSort(headRef)
1) If head is NULL or there is only one element in the Linked List 
    then return.
2) Else divide the linked list into two halves.  
      FrontBackSplit(head, &a, &b); /* a and b are two halves */
3) Sort the two halves a and b.
      MergeSort(a);
      MergeSort(b);
4) Merge the sorted a and b (using SortedMerge() discussed here) 
   and update the head pointer using headRef.
     *headRef = SortedMerge(a, b);
   






