CS 61B Lecture 32: 11'00": Sorting III https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc
A LOWER BOUND ON COMPARISION-BASED SORTING
      n numbers: each 1...n occuring once each.
      How many orders can they be in?
      Answer: n!
     
      Each order is a permutation of the numbers.
      n! possible permutations.
      n! <= n * n * n *.. n = n^n (upper bound)
      n! >=n/2 * (n/2+1) *... *(n-1)*n >= (n/2)^(n/2) (lower bound)
      
      log((n/2)^(n/2)) = n/2 log(n/2) = ~ &(nlogn)
      log(n^n) = nlogn
      
      so log(n!) = ~&(nlogn)


Comparision-based sort: all decisions based on comparing keys("if" statements).
A correct sorting algorithm must generate a different sequence of true/false answer for each permutation of 1...n.
If algorithm asks at most d true/false questions, it generates at most 2^d different sequences of true/false answers.
            n! <= 2^d
            log(n!) <= d


Every Comparision-based sorting algorithm takes â„¦(nlogn) worst-case time.

Fast algorithms make q-way decisions for large q.  --> Linear-time sorting
