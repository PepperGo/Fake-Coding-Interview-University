Related to quicksort

Selection:

Goal: Given an array of N items, find the kth largest.
Ex. Min(k = 0), Max(k = N - 1), median( k = N/2)

Applications
    Order statistics.
    Find the "top k"
    
    
Use theory as a guide:
     Easy NlogN upper bound. //(first sort the array, then find the ith largest one)
     Easy N upper bound for k = 1, 2, 3.
     Easy N lower bound. (Or will miss some items)
     
Quick-select(based on partitioning)
  Partition array so that: 
     1. Entry a[j] is in place.
     2. No larger entry to the left of j
     3. No smaller entry to the right of j
  Repeat in one subarray, depending on; finished when j equals k
  
  public static Comparable select(Comparable[] a, int k){ // like quick sort
        StdRandom.shuffle(a);
        int lo = 0, hi = a.length - 1;
        while(hi > lo){
            int j = partition(a, lo, hi);
            if(j < k) lo = j + 1;
            else if(j > k) hi = j - 1;
            else  return a[k];
        }
        return a[k];
  }
    

Quick-select: mathematical analysis.
Propostition. Quickselct takes linear time on average.
Proof: N + N/2 + N/4 + ... + 1 = 2N compares


Proposition: Compare-based selection algorithm whose worst-case running time is linear.


----------------------------------------------------------------------------------------------------
CS 61B Lecture 32: Sorting III (https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc)

SELECTION:
   Find kth smallest key in list.
   (item at index j if list is sorted, j = k - 1)
   
   e.g. Median of set of n keys: item whose index is j = (n-1)/2 in sorted list.
   
   
QuickSelect: Modifies quicksort. //&(n) average time if we select pivots randomly
   Find item at index j ---- i.e. (j + 1)th smallest key
   Start within unsorted list I of n items
   Choose pivot v from I.
   Partition I into lists I1, Iv and I2.
    --Items with same key as v go into any list
      (List-based: Iv; Array-base: I1 & I2)
   if (j < |I1|){
      Recursively find item with index j in I1; 
      return it.
   }else if(j < |I1| + |Iv|){
      Return v.
   }else{
      Recursively find item with index j - |I1| - |Iv| in I2.
      return it.
   }
        
   


