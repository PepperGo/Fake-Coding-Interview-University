CS 61B Lecture 33: Sorting V (https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4)

Counting Sort
   (1)  If items are keys, no associated values
        Noqueues.
        Count copies of each key.
        Suppose an array:  6  7  3  0  3  1  5  0  3  7
        Counts array: index 0  1  2  3  4  5  6  7
                      value 2  1  0  3  0  1  1  2
                      
                    return: 0  0  1  3  3  3  5  6  7  7(start from index 0)
                    

  (2)Counting sort with complete items   
        Key plus associated value.
      1.  Let x be input array of objects with keys.
       
     Demo: 
  Array x: 6  7  3  0  3  1  5  6  3  7 (key)
      2.  Count keys in x
        
        for(i = 0; i < x.length; i++){
            counts[x[i].key]++;
        }
  Array counts: 2  1  0  3  0  1  1  2
    
      3.  Do a scan so counts[i] contains # of keys less than i. (less than: < not <=)
        
        total = 0;
        for(j = 0; j < counts.length; j++){
            c = counts[j];
            counts[j] = total;
            total = total + c;
        }
   Array counts: 0  2  3  3  6  6  7  8
   
     4.  Let y be output array.
         counts[i] tells us first index of y to put items with key i.
   Use counts and input array x to build y.(counts changed with incrementment of index in input x)    
   Array y: index 0  1  2  3  4  5  6  7  8  9
                  0  0  1  3  3  3  5  6  7  7
                  
         for(i = 0; i < x.length; i++){
             y[counts[x[i].key]] = x[i];
             counts[x[i].key]++;
         }
  
  
  Bucket sort& counting sort takes O(q+n) time
  * If q âˆˆ O(n), they take O(n) time
  
  Array counting sort takes less memory.
  Linked list bucket sort more natural.
  
  What if q >> n?  --> Radix sort
 
