CS 61B Lecture 33: Sorting V 22'30" (https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4)

  RadixSort:
     Sort 1000 items in range 0...99,999,999.    
     Provide q = 10 buckets. Sort an first digit only.
     
     
     Bucket: 0  1  2  3  4  5   6     7  8  9
             ↓        ↓     ↓   ↓     ↓
          3429583  39509993 5   6   73942039
             ↓                        ↓
          592178                     75
                                      ↓
                                     78
                                     
     We could sort queue recursively on second digit, then on third digit, etc.
     
     Smaller subsets will be sorted inefficiently.
     Clever idea: keep numbers in one pile throughout sort, sort on last digit first, then next-to-last, up tp most significant digit.
     Works because bucket & counting sort are stable.
     
     Once we sort on last digit, 55,555,552 & 55,555,58 remain sorted.
     
     Sort on 1s: 720 450 771 822 322 505 925 5 955 925 777 858 28 829
     sort on 10s: 504 5 720 822 925 825 21 829 332 456 955 858 771 777
     sort on 100s: 5 21 332 456 504 720 771 777 822 825 829 858 925 955
     
     Faster if we sort on 2 digits at a time(radix q = 100) or 3(radix q = 1000).
     
     On computers, more natural to choose power-of-two radix like q = 256.
     
     q = # of buckets = radix of digit we use as sort key
     
How many passes?
     Each pass inspects logq bits of each key.
     e.g.    q = 256
            log q = 8 bits
     If all key represented in b bits, # of passes is [b/logq
     
Running time of radix sort: O((n+q)[(b/logq))


How to choose q?
     Choose q ∈ O(n), so each pass takes linear time.
     Make q large enough --> # of passes small
     Choose q ≈ n.
     Radix sort takes O(n + (b/logn)*n ) time
     
     
     ints: b is a constant, radix sort takes linear time.
     Pratical choice: make q be n rounded down to power of two.
     To keep memory use low: make q ≈ sqrt(n), rounded to nearest power of two.
     
------------------------------------------------------------------------------------------------
Algorithms II - StringSorts (https://www.youtube.com/watch?v=HKPrVm5FWvg&list=PLe-ggMe31CTcNvUX9E3tQeM6ntrdR8e53)

Strings in java
     * String processing
         String: Sequence of characters
     * C char data type: typically an 8-bit integer
         Supports 7-bit ASCII
         Can represent only 256 characters
     * Java char data type: A 16-bit unsigned integer
         Supports original 16-bit Unicode
         Supports 21-bits Unicode 3.0
         
     * The String data type:
     String data type in Java: Sequence of characters(immutable).
     
     Length: Number of characters  //s.length()
     Indexing: Get the ith character.  //s.charAt(int index)
     Substring extraction: Get a contiguous subsequence of characters   
               s.substring(int i, int j)//index i to index j - 1
     String concatenation: Append one character to end of another string.
     
     * The StringBuilder data type
       StringBuilder data type: Sequence of characters(mutable)
       Underlying implementation: Resizing char[] array and length
       
       Remark: StringBuffer data type is similart, but thread safe(and slower)
       

String vs. StringBuilder

How to efficiently reverse a string?
A.
   String rev = "";
   for(int i = s.length() - 1; i >= 0; i--)
        rev += s.charAt(i); //quadratic time
   return rev;
  
B. String Builder rev = new StringBuilder();
   for(int i = s.length() - 1; i >= 0; i--)
        rev.append(s.charAt(i));  //linear time
   return rev.toStirng();
         
         
How to efficiently form array of suffixes?
A.
    int N = s.length();
    String[] suffixes = new String[N];
    for(int i = 0; i < N; i++)
        suffixes[i] = s.substring(i, N);   //linear time and linear space
    return suffixes;

B. int N = s.length();
   StringBuilder sb = new StringBuilder(s);
   String[] suffixes = new String[N];
   for(int i = 0; i < N; i++)
       suffixes[i] = sb.substring(i, N); //quadratic time and quadratic space
   return suffixes;
     
     
How long to compute length of longest common prefix?
     public static int lcp(String s, String t){
         int N = Math.min(s.length(), t.length());
         for(int i = 0; i < N; i++)
             if(s.charAt(i) != t.charAt(i))     //linear time(worst cast)  sublinear time(typical case)
                 return i;
         return N;        
     }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Key Indexed Counting
   Goal: Sort an array a[] of N integers between 0 and R-1.
     1. Count frequencies of each letter using key as index.
     2. Compute frequency cumulates which specify destinations
     3. Access cumulates using key as index to move items
     4. Copy back into original array
     
/////////////////////////////////////////////////////////////////////////////////////////////////////////
least significant digit first string radix sort:

LSD string(radix) sort:
   Consier characters from right to left
   Stably sort using dth character as the key(using key-indexed counting)

///////////////////////////////////////////////////////////////////////////////////////////////////////////
Most significant Digit first string radix sort:
   MSD String(radix) sort:
      Partition array into R pieces according to first character(use key-indexed counting)
      Recursively sort all strings that start with each character(key-indexed counts delineate subarrays to sort)
      
///////////////////////////////////////////////////////////////////////////////////////////////////////////
3-Way Radix Quicksort
Overview: Do 3-way partition on the dth character.
          Less overhead than R-way partitioning in MSD string sort.
          Does not reexamine characters equal to the partitioning char.
          
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Suffix arrays


          
      
 

