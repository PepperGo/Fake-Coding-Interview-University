QuickSort(https://www.youtube.com/playlist?list=PLe-ggMe31CTeE3x2-nF1-toca1QpuXwE1)
Mergesort: Java sort for objects
Quicksort: Java sort for primitive types
//////////////////////////////////////////////////////////////////////////////////////////////
Quicksort:

Basci plan:
      Shuffle the array
      Partition so that, for some j
         entry a[j] is in place
         no larger entry to the left of j
         no smaller entry to the right of j
      Sort each piece recursively
      
Demo:
    Phase 1. Repeat until i and j pointers cross
          Scan i from left to right so long as (a[i] < a[lo]).  //lo is the leftmost index
          Scan j from right to left so long as (a[j] > a[lo]).
          Exchange a[i] with a[j]
    Phase 2. When pointers cross.
          Exchange a[lo] with a[j]
          
Java code:

private static int partition(Comparable[] a, int lo, int hi){
	int i = lo, j = hi + 1;
	while(true){
		while(less(a[++i], a[lo]))   //find item on left to swap
			if(i == hi) break;
	        while(less(a[lo], a[--j]))   //find item on right to swap
			if(j == lo) break;
	    
        if(i >= j) break;
		exch(a, i, j);
 	}
	exch(a, lo, j);
	return j;
}

Class:

public class Quick{
	private static int partition(Comparable[] a, int lo, int hi){
		//as previous 
	}
	
	public static void sort(Comparable[] a){
		StdRandom.shuffle(a);
		sort(a, 0, a.length - 1);
	}
	
	private static void sort(Comparable[] a, int lo, int hi){
		if(hi <= lo) return;
		int j = partition(a, lo, hi);
		sort(a, lo, j - 1);
		sort(a, j+1, hi);
	}
}


Quicksort trace: See video

Implementation details:
   partitioning in-place: Using an extra array makes partitioning easier(and stable), but is not worth the cost.
   Terminating the loop: Testing whether the pointers cross is a bit tricker than it might seem.
   Staying in bounds: The (j == lo) test is redundant, but the (i == hi) test is not.
   Preserving randomness: Shuffling is needed for performance guarantee.
   Equal keys: When duplicates are present, it is (counter-intuitively) better to stop on keys equal to the partitioning item's key.
   
Empirical analysis:

Running time estimates:
         Best case: Number of compares is ~NlogN
         Worst case: Number of compares is ~1/2 * N^2 (N + N -1 + N - 2 + ... + 1)
         Average-case: The average number of compares Cn to quicksort an array of N distinct keys is ~2NlnN(and the number of exchanges is ~1/3 NlnN)
                        ~1.39NlgN
                       Quicksort has 39% more compares than mergesort.
                       But faster than mergesort in parctice because of less data movement.
         
Proposition. 
          Quicksort is an in-place sorting algorithm.(in-place algorithm is an algorithm which transforms input using no auxiliary data structure. )
          Pf.
              Partitioning: constant extra space.
              Depth of recursion: logarithmic extra space(with high probability)
          
          Propostition: Quicksort is not stable
          
          
Pratical improvements:
    1. Insertion sort small subarrays.
          Even quicksort has too much overhead for tiny subarrays.
          Cutoff to insertion sort for 10 items
          Note: could delay insertion sort until one pass at end.
          
          if(hi <= lo + CUTOFF - 1){
               Insertion.sort(a, lo, hi);
               return;
          }
              
     2. Median of sample.
          Best choice of pivot item = median.
          Estimate true median by taking median of sample.
          Median-of-3(random) items
          
          int m = medianOf3(a, lo, lo + (hi - lo)/2, hi);
          swap(a, lo, m);
        
	public long medianOf3(int left, int right) {
		int center = (left + right) / 2;
		// order left & center
		if (theArray[left] > theArray[center])
			swap(left, center);
		// order left & right
		if (theArray[left] > theArray[right])
			swap(left, right);
		// order center & right
		if (theArray[center] > theArray[right])
			swap(center, right);

		swap(center, right - 1); // put pivot on right
		return theArray[right - 1]; // return median value
	} // end medianOf3()
        
 
 //////////////////////////////////////////////////////////////////////
 See Selection file
 
 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
Duplicate keys:
Often, purpose of sort is to bring items with equal keys together.

Mergesort with duplicate keys: Always between 1/2NlgN and NlgN compares

Quicksort with duplicate keys: Algorithm goes quadratic unless partitioning stops on equal keys!

Duplicate keys: the problem

Mistake: Put all items equal to the partitioning item on one side.
Consequence: ~1/2N^2 compares when all keys equal.

Recommended: Stop scans on items equal to the partitioning item.
Consequence: ~NlogN compares when all keys equal.

Desirable: Put all items equal to the partitioning item in place.

3-way partitioning:
Goal. Partition array into 3 parts so that:
      1. Entries between lt and gt equal to partition item v.
      2. No larger entries to left of lt.
      3. No smaller entries to right of gt.
      
Demo: 1. Let v be partitioning item a[lo]
      2. Scan i from left to right
      -(a[i] < v): exchange a[lt] with a[i]; increment both lt and i
      -(a[i] > v): exchange a[gt] with a[i]; decrement gt
      -(a[i] == v): increment i
      
      // array stucture: < v, lt,  = v, i, ..., gt, > v

 
 private static void sort(Comparable[] a, int lo, int hi){
     if(hi <= lo) return;
     int lt = lo, gt = hi;
     Comparable v = a[lo];
     int i = lo;
     while(i <= gt){
        int cmp = a[i].compareTo(v);
	if (cmp < 0) exch(a, lt++, i++);
	else if(cmp > 0) exch(a, i, gt--);
	else i++
     }
     sort(a, lo, lt - 1);
     sort(a, gt + 1, hi);
 }
    
Duplicate keys: lower bound at least

          
-------------------------------------------------------------------------------------------------
QuickSort: https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk (it's quite different from the verison on the top)

QuickSort: Recursive divide-and-conquer algorithm
           Fastest comparision-based sort for arrays
	   &(n^2) worst-case time
	   Virtually, always O(nlogn) in practice
	   
	   Start with list I of n items.
	   Choose pivot item v from I.
	   Partition I into 2 unsorted lists I1&I2
	   --I1: All keys smaller than v's key
	   --I2: All keys bigger than v's key
	   --Items: same key as v can go into either list
	   --The pivot v does not go into either list
	   
	   Sort I1 recursively, yielding sorted list S1
	   Sort I2 recursively, yielding sorted list S2
	   Concatenate S1, v, S2, yielding sorted list S
	   
	   Demo:8'51"
	   
Quicksort on unsorted array: num of level: logn, time: O(nlogn) 
Quicksort on sorted array: num of level: n, time: O(n^2)	
          When input already sort, choosing first item as pivot is disastrous.

Choosing a pivot: 
                  Randomly select an item from I as pivot.
                  On average, 1/4, 3/4 split, average running time O(nlogn)
		  "median-of-three"
		  

Quicksort on linked lists.
     Suppose we put all items with same key as v into I1, not useful
     
     Better partition I into 3 lists I1, I2, Iv
     Iv contains pivot & all items with same key as v
     Sort I1&I2, not Iv. Concatenate S1, Iv, S2
     
     Demo
     
Quicksort on arrays.
     In-place is fast.
     Array a.
     Sort items a[low]...a[high]
     We choose pivot v; swap it with last item a[high]
     
     Demo
     3 8 0 9 5 7 4
     pivot: 5
     3 8 0 9 4 7 5
     
     Invariants: 
       1. All items left of index i have a key <= pivot
       2. All items right of index j have a key >= pivot
       
     Adavance i to key >= pivot
     Decrement j to key s <= pivot
     
                              3 8 0 9 4 7 5			     
    swap items at i & j       3 4 0 9 8 7 5
                                i     j  pivot
    Repeat until i>= j        3 4 0 9 8 7 5
                                  j i
    Swap pivot back to middle 3 4 0  5  8 7 9
    
    Items with same key as pivot?(problem)
    
    public static void quicksort(Comparable[] a, int low, int high){
       if(low < high){
                int pivotIndex = random number from low to high;
		Comparable pivot = a[pivotIndex];
		a[pivotIndex] = a[high];
		a[high] = pivot;
		
		int i = low - 1;
		int j = high;
		
		do{
		   do{i++;} while(a[i].compareTo(pivot) < 0);
		   do{j--;} while(a[i].compareTo(pivot) > 0) && (j > low);
		   if(i < j){
		      swap a[i] and a[j];
		   }
		}while(i < j);
		
		a[high] = a[i];
		a[i] = pivot;
		quicksort(a, low, i - 1);
		quicksort(a, i + 1, high);
       }
    }
    
    
    
